// apps/amana/dialogFlows.js
// üåê Motor de di√°logo do Amana_BOT
// Controla fluxos de conversa baseados em contexto e mem√≥ria persistente (memory.js)
// Compat√≠vel com autentica√ß√£o OAuth (n√£o usa Service Account)

import { updateContext, getDialogState, beginTask, endTask } from "./memory.js";
import { authenticateGoogle, runCommand } from "./google.js";

// ============================================================
// üóìÔ∏è FLUXO: CRIAR EVENTO
// ============================================================
export async function handleCreateEvent(chatId, userText) {
  const { intent, fields, stage } = await getDialogState(chatId);
  let reply = "";
  let nextStage = stage;
  const newFields = { ...fields };

  // 1Ô∏è‚É£ In√≠cio
  if (!intent || intent !== "CREATE_EVENT") {
    await beginTask(chatId, "CREATE_EVENT", {});
    reply = "Certo, vamos agendar uma reuni√£o. Qual o t√≠tulo do evento?";
    nextStage = "awaiting_summary";
  }

  // 2Ô∏è‚É£ T√≠tulo
  else if (stage === "awaiting_summary") {
    newFields.summary = userText;
    reply = "Perfeito. Qual dia e hor√°rio da reuni√£o?";
    nextStage = "awaiting_time";
  }

  // 3Ô∏è‚É£ Data e hor√°rio
  else if (stage === "awaiting_time") {
    const lower = userText.toLowerCase();
    const now = new Date();
    let start, end;

    if (lower.includes("amanh√£")) {
      start = new Date(now.getTime() + 24 * 60 * 60 * 1000);
    } else {
      start = now;
    }

    // Detecta ‚Äúdas 16h √†s 18h‚Äù
    const match = lower.match(/(\d{1,2})h.*?(\d{1,2})h/);
    if (match) {
      const [_, h1, h2] = match;
      start.setHours(parseInt(h1), 0, 0);
      end = new Date(start);
      end.setHours(parseInt(h2), 0, 0);
    } else {
      start.setHours(9, 0, 0);
      end = new Date(start);
      end.setHours(10, 0, 0);
    }

    newFields.start = start.toISOString();
    newFields.end = end.toISOString();
    reply = "Entendido. Quem deve participar? (pode dizer nomes ou e-mails)";
    nextStage = "awaiting_attendees";
  }

  // 4Ô∏è‚É£ Participantes
  else if (stage === "awaiting_attendees") {
    const emails = userText
      .split(/[\s,;]+/)
      .filter((x) => x.includes("@"))
      .map((x) => x.trim());

    if (emails.length > 0) {
      newFields.attendees = emails;
      reply = "Quer adicionar uma descri√ß√£o ou posso criar o evento agora?";
      nextStage = "awaiting_description";
    } else if (userText.toLowerCase().includes("sem convidados")) {
      newFields.attendees = [];
      reply = "Ok, sem convidados. Deseja adicionar uma descri√ß√£o ou posso criar o evento agora?";
      nextStage = "awaiting_description";
    } else {
      reply = "N√£o encontrei e-mails v√°lidos. Pode repetir os endere√ßos?";
      nextStage = "awaiting_attendees";
    }
  }

  // 5Ô∏è‚É£ Descri√ß√£o
  else if (stage === "awaiting_description") {
    if (userText.toLowerCase().includes("crie") || userText.toLowerCase().includes("pode")) {
      reply = "Tudo certo! Criando o evento...";
      nextStage = "creating_event";
    } else {
      newFields.description = userText;
      reply = "Perfeito! Posso criar o evento agora?";
      nextStage = "confirm_create";
    }
  }

  // 6Ô∏è‚É£ Cria√ß√£o
  else if (stage === "confirm_create" || stage === "creating_event") {
    try {
      const auth = await authenticateGoogle();
      await runCommand(auth, "CREATE_EVENT", newFields);
      reply = `üìÖ Evento criado com sucesso: *${newFields.summary}*`;
    } catch (err) {
      reply = `‚ùå Erro ao criar o evento: ${err.message}`;
    }
    await endTask(chatId);
    nextStage = null;
  }

  // üß© Fallback
  else {
    reply = "Parece que j√° t√≠nhamos come√ßado algo, mas n√£o entendi bem. Quer recome√ßar o agendamento?";
    await endTask(chatId);
    nextStage = null;
  }

  await updateContext(chatId, { intent: "CREATE_EVENT", fields: newFields, stage: nextStage });
  return reply;
}

// ============================================================
// üì¨ FLUXO: LER EMAILS
// ============================================================
export async function handleReadEmails(chatId, userText) {
  const { intent, fields, stage } = await getDialogState(chatId);
  let reply = "";
  let nextStage = stage;
  const newFields = { ...fields };

  // 1Ô∏è‚É£ In√≠cio
  if (!intent || intent !== "READ_EMAILS") {
    await beginTask(chatId, "READ_EMAILS", {});
    reply = "Quer que eu leia todos os e-mails n√£o lidos ou apenas os mais importantes?";
    nextStage = "awaiting_scope";
  }

  // 2Ô∏è‚É£ Escopo
  else if (stage === "awaiting_scope") {
    if (userText.toLowerCase().includes("importantes")) {
      newFields.query = "label:important";
      reply = "Perfeito. Quantos e-mails voc√™ quer que eu leia?";
      nextStage = "awaiting_quantity";
    } else {
      newFields.query = "is:unread";
      reply = "Ok. Quantos e-mails devo ler?";
      nextStage = "awaiting_quantity";
    }
  }

  // 3Ô∏è‚É£ Quantidade
  else if (stage === "awaiting_quantity") {
    const num = parseInt(userText.match(/\d+/)?.[0] || "3", 10);
    const auth = await authenticateGoogle();
    const result = await runCommand(auth, "READ_EMAILS", { maxResults: num, query: newFields.query });

    if (!result.emails || result.emails.length === 0) {
      reply = "Nenhum e-mail encontrado üì≠";
      await endTask(chatId);
      nextStage = null;
    } else {
      newFields.emails = result.emails;
      newFields.index = 0;
      const first = result.emails[0];
      reply = `üìß *${first.subject}*\n_De ${first.from}_\n\nQuer que eu continue lendo? (sim/n√£o)`;
      nextStage = "awaiting_continue";
    }
  }

  // 4Ô∏è‚É£ Continua lendo?
  else if (stage === "awaiting_continue") {
    const answer = userText.toLowerCase();

    if (answer.includes("sim")) {
      const nextIndex = (newFields.index || 0) + 1;
      if (nextIndex < (newFields.emails?.length || 0)) {
        const email = newFields.emails[nextIndex];
        newFields.index = nextIndex;
        reply = `üìß *${email.subject}*\n_De ${email.from}_\n\nQuer continuar lendo? (sim/n√£o)`;
        nextStage = "awaiting_continue";
      } else {
        reply = "Fim da lista de e-mails üì™";
        await endTask(chatId);
        nextStage = null;
      }
    } else if (answer.includes("n√£o")) {
      reply = "Tudo bem üëç Parando a leitura.";
      await endTask(chatId);
      nextStage = null;
    } else {
      reply = "N√£o entendi. Deseja continuar lendo os pr√≥ximos e-mails? (sim/n√£o)";
      nextStage = "awaiting_continue";
    }
  }

  // üß© Fallback
  else {
    reply = "Vamos recome√ßar a leitura dos e-mails?";
    await endTask(chatId);
    nextStage = null;
  }

  await updateContext(chatId, { intent: "READ_EMAILS", fields: newFields, stage: nextStage });
  return reply;
}

// ============================================================
// ‚úâÔ∏è FLUXO: ENVIAR EMAIL
// ============================================================
export async function handleSendEmail(chatId, userText) {
  const { intent, fields, stage } = await getDialogState(chatId);
  let reply = "";
  let nextStage = stage;
  const newFields = { ...fields };

  if (!intent || intent !== "SEND_EMAIL") {
    await beginTask(chatId, "SEND_EMAIL", {});
    reply = "Claro, para quem devo enviar o e-mail?";
    nextStage = "awaiting_to";
  }

  else if (stage === "awaiting_to") {
    const emails = userText.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,}/g);
    if (emails && emails.length > 0) {
      newFields.to = emails;
      reply = "Qual ser√° o assunto?";
      nextStage = "awaiting_subject";
    } else {
      reply = "N√£o encontrei e-mails v√°lidos. Pode repetir o destinat√°rio?";
      nextStage = "awaiting_to";
    }
  }

  else if (stage === "awaiting_subject") {
    newFields.subject = userText;
    reply = "E qual ser√° o conte√∫do da mensagem?";
    nextStage = "awaiting_body";
  }

  else if (stage === "awaiting_body") {
    newFields.body = userText;
    reply = "Posso enviar agora?";
    nextStage = "confirm_send";
  }

  else if (stage === "confirm_send") {
    if (userText.toLowerCase().includes("sim")) {
      try {
        const auth = await authenticateGoogle();
        await runCommand(auth, "SEND_EMAIL", newFields);
        reply = `üì§ E-mail enviado com sucesso para ${newFields.to.join(", ")}`;
      } catch (err) {
        reply = `‚ùå Erro ao enviar o e-mail: ${err.message}`;
      }
      await endTask(chatId);
      nextStage = null;
    } else {
      reply = "Tudo bem üëç E-mail cancelado.";
      await endTask(chatId);
      nextStage = null;
    }
  }

  else {
    reply = "Quer tentar enviar um novo e-mail?";
    await endTask(chatId);
    nextStage = null;
  }

  await updateContext(chatId, { intent: "SEND_EMAIL", fields: newFields, stage: nextStage });
  return reply;
}

// ============================================================
// üíæ FLUXO: SALVAR MEM√ìRIA
// ============================================================
export async function handleSaveMemory(chatId, userText) {
  const { intent, fields, stage } = await getDialogState(chatId);
  let reply = "";
  let nextStage = stage;
  const newFields = { ...fields };

  if (!intent || intent !== "SAVE_MEMORY") {
    await beginTask(chatId, "SAVE_MEMORY", {});
    reply = "Quer salvar essa mem√≥ria com algum t√≠tulo?";
    nextStage = "awaiting_title";
  }

  else if (stage === "awaiting_title") {
    newFields.title = userText;
    reply = "Perfeito. Qual √© o conte√∫do que devo registrar?";
    nextStage = "awaiting_content";
  }

  else if (stage === "awaiting_content") {
    newFields.content = userText;
    try {
      const auth = await authenticateGoogle();
      await runCommand(auth, "SAVE_MEMORY", newFields);
      reply = `üß† Mem√≥ria salva com o t√≠tulo: *${newFields.title}*`;
    } catch (err) {
      reply = `‚ùå Erro ao salvar mem√≥ria: ${err.message}`;
    }
    await endTask(chatId);
    nextStage = null;
  }

  else {
    reply = "Quer registrar outra mem√≥ria?";
    await endTask(chatId);
    nextStage = null;
  }

  await updateContext(chatId, { intent: "SAVE_MEMORY", fields: newFields, stage: nextStage });
  return reply;
}
