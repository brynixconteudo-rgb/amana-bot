// ai.js
// üß† N√∫cleo de interpreta√ß√£o sem√¢ntica do Amana_BOT
// Analisa mensagens livres e devolve { intent, entities } prontos
// Usa GPT-4-mini para extrair inten√ß√£o e dados estruturados
// Compat√≠vel com todos os fluxos (evento, e-mail, mem√≥ria, leitura de e-mails)

import OpenAI from "openai";

const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Analisa uma mensagem do usu√°rio e identifica inten√ß√£o e entidades
 * @param {string} userText - Texto original enviado pelo usu√°rio
 * @returns {Promise<{ intent: string, entities: object, confidence: number }>}
 */
export async function analyzeMessage(userText) {
  try {
    const prompt = `
Voc√™ √© um assistente inteligente que interpreta comandos humanos para automa√ß√£o pessoal.
Analise a seguinte frase e retorne um JSON com tr√™s campos: "intent", "entities" e "confidence".

INTENTS poss√≠veis:
- CREATE_EVENT ‚Üí criar reuni√£o, compromisso ou evento
- READ_EMAILS ‚Üí ler e-mails, mensagens, verificar caixa de entrada
- SEND_EMAIL ‚Üí enviar e-mail
- SAVE_MEMORY ‚Üí salvar anota√ß√µes, mem√≥rias, pensamentos
- UNKNOWN ‚Üí se n√£o for poss√≠vel classificar

ENTITIES poss√≠veis:
- summary: t√≠tulo ou assunto do evento
- date: data mencionada (ex: "amanh√£", "20/10")
- start: hor√°rio de in√≠cio (ex: "10:00")
- end: hor√°rio de fim (ex: "11:00")
- attendees: lista de e-mails ou nomes de participantes
- query: filtro para e-mails (ex: "importantes", "n√£o lidos")
- to: destinat√°rio(s) de e-mail
- subject: assunto do e-mail
- body: corpo da mensagem
- title: t√≠tulo da mem√≥ria
- content: conte√∫do da mem√≥ria

Retorne **apenas** JSON v√°lido, sem texto adicional.

Frase: "${userText}"
    `;

    const response = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.3,
    });

    const text = response.choices[0].message?.content || "{}";
    const parsed = JSON.parse(text);

    // Seguran√ßa: fallback para caso de erro no modelo
    return {
      intent: parsed.intent || "UNKNOWN",
      entities: parsed.entities || {},
      confidence: parsed.confidence || 0.5,
    };
  } catch (err) {
    console.error("‚ùå Erro em analyzeMessage:", err.message);
    return { intent: "UNKNOWN", entities: {}, confidence: 0 };
  }
}
